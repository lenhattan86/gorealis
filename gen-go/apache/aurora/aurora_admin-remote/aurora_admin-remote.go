// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"aurora"
)

var _ = aurora.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  Response setQuota(string ownerRole, ResourceAggregate quota)")
  fmt.Fprintln(os.Stderr, "  Response forceTaskState(string taskId, ScheduleStatus status)")
  fmt.Fprintln(os.Stderr, "  Response performBackup()")
  fmt.Fprintln(os.Stderr, "  Response listBackups()")
  fmt.Fprintln(os.Stderr, "  Response stageRecovery(string backupId)")
  fmt.Fprintln(os.Stderr, "  Response queryRecovery(TaskQuery query)")
  fmt.Fprintln(os.Stderr, "  Response deleteRecoveryTasks(TaskQuery query)")
  fmt.Fprintln(os.Stderr, "  Response commitRecovery()")
  fmt.Fprintln(os.Stderr, "  Response unloadRecovery()")
  fmt.Fprintln(os.Stderr, "  Response startMaintenance(Hosts hosts)")
  fmt.Fprintln(os.Stderr, "  Response drainHosts(Hosts hosts)")
  fmt.Fprintln(os.Stderr, "  Response maintenanceStatus(Hosts hosts)")
  fmt.Fprintln(os.Stderr, "  Response endMaintenance(Hosts hosts)")
  fmt.Fprintln(os.Stderr, "  Response slaDrainHosts(Hosts hosts, SlaPolicy defaultSlaPolicy, i64 timeoutSecs)")
  fmt.Fprintln(os.Stderr, "  Response snapshot()")
  fmt.Fprintln(os.Stderr, "  Response triggerExplicitTaskReconciliation(ExplicitReconciliationSettings settings)")
  fmt.Fprintln(os.Stderr, "  Response triggerImplicitTaskReconciliation()")
  fmt.Fprintln(os.Stderr, "  Response pruneTasks(TaskQuery query)")
  fmt.Fprintln(os.Stderr, "  Response createJob(JobConfiguration description)")
  fmt.Fprintln(os.Stderr, "  Response scheduleCronJob(JobConfiguration description)")
  fmt.Fprintln(os.Stderr, "  Response descheduleCronJob(JobKey job)")
  fmt.Fprintln(os.Stderr, "  Response startCronJob(JobKey job)")
  fmt.Fprintln(os.Stderr, "  Response restartShards(JobKey job,  shardIds)")
  fmt.Fprintln(os.Stderr, "  Response slaRestartShards(JobKey job,  shardIds, SlaPolicy slaPolicy)")
  fmt.Fprintln(os.Stderr, "  Response killTasks(JobKey job,  instances, string message)")
  fmt.Fprintln(os.Stderr, "  Response addInstances(InstanceKey key, i32 count)")
  fmt.Fprintln(os.Stderr, "  Response replaceCronTemplate(JobConfiguration config)")
  fmt.Fprintln(os.Stderr, "  Response startJobUpdate(JobUpdateRequest request, string message)")
  fmt.Fprintln(os.Stderr, "  Response pauseJobUpdate(JobUpdateKey key, string message)")
  fmt.Fprintln(os.Stderr, "  Response resumeJobUpdate(JobUpdateKey key, string message)")
  fmt.Fprintln(os.Stderr, "  Response abortJobUpdate(JobUpdateKey key, string message)")
  fmt.Fprintln(os.Stderr, "  Response rollbackJobUpdate(JobUpdateKey key, string message)")
  fmt.Fprintln(os.Stderr, "  Response pulseJobUpdate(JobUpdateKey key)")
  fmt.Fprintln(os.Stderr, "  Response getRoleSummary()")
  fmt.Fprintln(os.Stderr, "  Response getJobSummary(string role)")
  fmt.Fprintln(os.Stderr, "  Response getTasksStatus(TaskQuery query)")
  fmt.Fprintln(os.Stderr, "  Response getTasksWithoutConfigs(TaskQuery query)")
  fmt.Fprintln(os.Stderr, "  Response getPendingReason(TaskQuery query)")
  fmt.Fprintln(os.Stderr, "  Response getConfigSummary(JobKey job)")
  fmt.Fprintln(os.Stderr, "  Response getJobs(string ownerRole)")
  fmt.Fprintln(os.Stderr, "  Response getQuota(string ownerRole)")
  fmt.Fprintln(os.Stderr, "  Response populateJobConfig(JobConfiguration description)")
  fmt.Fprintln(os.Stderr, "  Response getJobUpdateSummaries(JobUpdateQuery jobUpdateQuery)")
  fmt.Fprintln(os.Stderr, "  Response getJobUpdateDetails(JobUpdateQuery query)")
  fmt.Fprintln(os.Stderr, "  Response getJobUpdateDiff(JobUpdateRequest request)")
  fmt.Fprintln(os.Stderr, "  Response getTierConfigs()")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := aurora.NewAuroraAdminClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "setQuota":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetQuota requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg472 := flag.Arg(2)
    mbTrans473 := thrift.NewTMemoryBufferLen(len(arg472))
    defer mbTrans473.Close()
    _, err474 := mbTrans473.WriteString(arg472)
    if err474 != nil {
      Usage()
      return
    }
    factory475 := thrift.NewTJSONProtocolFactory()
    jsProt476 := factory475.GetProtocol(mbTrans473)
    argvalue1 := aurora.NewResourceAggregate()
    err477 := argvalue1.Read(context.Background(), jsProt476)
    if err477 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SetQuota(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "forceTaskState":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ForceTaskState requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := aurora.ScheduleStatus(tmp1)
    value1 := argvalue1
    fmt.Print(client.ForceTaskState(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "performBackup":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "PerformBackup requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.PerformBackup(context.Background()))
    fmt.Print("\n")
    break
  case "listBackups":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ListBackups requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ListBackups(context.Background()))
    fmt.Print("\n")
    break
  case "stageRecovery":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StageRecovery requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.StageRecovery(context.Background(), value0))
    fmt.Print("\n")
    break
  case "queryRecovery":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QueryRecovery requires 1 args")
      flag.Usage()
    }
    arg480 := flag.Arg(1)
    mbTrans481 := thrift.NewTMemoryBufferLen(len(arg480))
    defer mbTrans481.Close()
    _, err482 := mbTrans481.WriteString(arg480)
    if err482 != nil {
      Usage()
      return
    }
    factory483 := thrift.NewTJSONProtocolFactory()
    jsProt484 := factory483.GetProtocol(mbTrans481)
    argvalue0 := aurora.NewTaskQuery()
    err485 := argvalue0.Read(context.Background(), jsProt484)
    if err485 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.QueryRecovery(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteRecoveryTasks":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteRecoveryTasks requires 1 args")
      flag.Usage()
    }
    arg486 := flag.Arg(1)
    mbTrans487 := thrift.NewTMemoryBufferLen(len(arg486))
    defer mbTrans487.Close()
    _, err488 := mbTrans487.WriteString(arg486)
    if err488 != nil {
      Usage()
      return
    }
    factory489 := thrift.NewTJSONProtocolFactory()
    jsProt490 := factory489.GetProtocol(mbTrans487)
    argvalue0 := aurora.NewTaskQuery()
    err491 := argvalue0.Read(context.Background(), jsProt490)
    if err491 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteRecoveryTasks(context.Background(), value0))
    fmt.Print("\n")
    break
  case "commitRecovery":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CommitRecovery requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CommitRecovery(context.Background()))
    fmt.Print("\n")
    break
  case "unloadRecovery":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "UnloadRecovery requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.UnloadRecovery(context.Background()))
    fmt.Print("\n")
    break
  case "startMaintenance":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StartMaintenance requires 1 args")
      flag.Usage()
    }
    arg492 := flag.Arg(1)
    mbTrans493 := thrift.NewTMemoryBufferLen(len(arg492))
    defer mbTrans493.Close()
    _, err494 := mbTrans493.WriteString(arg492)
    if err494 != nil {
      Usage()
      return
    }
    factory495 := thrift.NewTJSONProtocolFactory()
    jsProt496 := factory495.GetProtocol(mbTrans493)
    argvalue0 := aurora.NewHosts()
    err497 := argvalue0.Read(context.Background(), jsProt496)
    if err497 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.StartMaintenance(context.Background(), value0))
    fmt.Print("\n")
    break
  case "drainHosts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DrainHosts requires 1 args")
      flag.Usage()
    }
    arg498 := flag.Arg(1)
    mbTrans499 := thrift.NewTMemoryBufferLen(len(arg498))
    defer mbTrans499.Close()
    _, err500 := mbTrans499.WriteString(arg498)
    if err500 != nil {
      Usage()
      return
    }
    factory501 := thrift.NewTJSONProtocolFactory()
    jsProt502 := factory501.GetProtocol(mbTrans499)
    argvalue0 := aurora.NewHosts()
    err503 := argvalue0.Read(context.Background(), jsProt502)
    if err503 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DrainHosts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "maintenanceStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MaintenanceStatus requires 1 args")
      flag.Usage()
    }
    arg504 := flag.Arg(1)
    mbTrans505 := thrift.NewTMemoryBufferLen(len(arg504))
    defer mbTrans505.Close()
    _, err506 := mbTrans505.WriteString(arg504)
    if err506 != nil {
      Usage()
      return
    }
    factory507 := thrift.NewTJSONProtocolFactory()
    jsProt508 := factory507.GetProtocol(mbTrans505)
    argvalue0 := aurora.NewHosts()
    err509 := argvalue0.Read(context.Background(), jsProt508)
    if err509 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MaintenanceStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "endMaintenance":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "EndMaintenance requires 1 args")
      flag.Usage()
    }
    arg510 := flag.Arg(1)
    mbTrans511 := thrift.NewTMemoryBufferLen(len(arg510))
    defer mbTrans511.Close()
    _, err512 := mbTrans511.WriteString(arg510)
    if err512 != nil {
      Usage()
      return
    }
    factory513 := thrift.NewTJSONProtocolFactory()
    jsProt514 := factory513.GetProtocol(mbTrans511)
    argvalue0 := aurora.NewHosts()
    err515 := argvalue0.Read(context.Background(), jsProt514)
    if err515 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.EndMaintenance(context.Background(), value0))
    fmt.Print("\n")
    break
  case "slaDrainHosts":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SlaDrainHosts requires 3 args")
      flag.Usage()
    }
    arg516 := flag.Arg(1)
    mbTrans517 := thrift.NewTMemoryBufferLen(len(arg516))
    defer mbTrans517.Close()
    _, err518 := mbTrans517.WriteString(arg516)
    if err518 != nil {
      Usage()
      return
    }
    factory519 := thrift.NewTJSONProtocolFactory()
    jsProt520 := factory519.GetProtocol(mbTrans517)
    argvalue0 := aurora.NewHosts()
    err521 := argvalue0.Read(context.Background(), jsProt520)
    if err521 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg522 := flag.Arg(2)
    mbTrans523 := thrift.NewTMemoryBufferLen(len(arg522))
    defer mbTrans523.Close()
    _, err524 := mbTrans523.WriteString(arg522)
    if err524 != nil {
      Usage()
      return
    }
    factory525 := thrift.NewTJSONProtocolFactory()
    jsProt526 := factory525.GetProtocol(mbTrans523)
    argvalue1 := aurora.NewSlaPolicy()
    err527 := argvalue1.Read(context.Background(), jsProt526)
    if err527 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err528 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err528 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SlaDrainHosts(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "snapshot":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Snapshot requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Snapshot(context.Background()))
    fmt.Print("\n")
    break
  case "triggerExplicitTaskReconciliation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TriggerExplicitTaskReconciliation requires 1 args")
      flag.Usage()
    }
    arg529 := flag.Arg(1)
    mbTrans530 := thrift.NewTMemoryBufferLen(len(arg529))
    defer mbTrans530.Close()
    _, err531 := mbTrans530.WriteString(arg529)
    if err531 != nil {
      Usage()
      return
    }
    factory532 := thrift.NewTJSONProtocolFactory()
    jsProt533 := factory532.GetProtocol(mbTrans530)
    argvalue0 := aurora.NewExplicitReconciliationSettings()
    err534 := argvalue0.Read(context.Background(), jsProt533)
    if err534 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TriggerExplicitTaskReconciliation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "triggerImplicitTaskReconciliation":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "TriggerImplicitTaskReconciliation requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.TriggerImplicitTaskReconciliation(context.Background()))
    fmt.Print("\n")
    break
  case "pruneTasks":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PruneTasks requires 1 args")
      flag.Usage()
    }
    arg535 := flag.Arg(1)
    mbTrans536 := thrift.NewTMemoryBufferLen(len(arg535))
    defer mbTrans536.Close()
    _, err537 := mbTrans536.WriteString(arg535)
    if err537 != nil {
      Usage()
      return
    }
    factory538 := thrift.NewTJSONProtocolFactory()
    jsProt539 := factory538.GetProtocol(mbTrans536)
    argvalue0 := aurora.NewTaskQuery()
    err540 := argvalue0.Read(context.Background(), jsProt539)
    if err540 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PruneTasks(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateJob requires 1 args")
      flag.Usage()
    }
    arg541 := flag.Arg(1)
    mbTrans542 := thrift.NewTMemoryBufferLen(len(arg541))
    defer mbTrans542.Close()
    _, err543 := mbTrans542.WriteString(arg541)
    if err543 != nil {
      Usage()
      return
    }
    factory544 := thrift.NewTJSONProtocolFactory()
    jsProt545 := factory544.GetProtocol(mbTrans542)
    argvalue0 := aurora.NewJobConfiguration()
    err546 := argvalue0.Read(context.Background(), jsProt545)
    if err546 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateJob(context.Background(), value0))
    fmt.Print("\n")
    break
  case "scheduleCronJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ScheduleCronJob requires 1 args")
      flag.Usage()
    }
    arg547 := flag.Arg(1)
    mbTrans548 := thrift.NewTMemoryBufferLen(len(arg547))
    defer mbTrans548.Close()
    _, err549 := mbTrans548.WriteString(arg547)
    if err549 != nil {
      Usage()
      return
    }
    factory550 := thrift.NewTJSONProtocolFactory()
    jsProt551 := factory550.GetProtocol(mbTrans548)
    argvalue0 := aurora.NewJobConfiguration()
    err552 := argvalue0.Read(context.Background(), jsProt551)
    if err552 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ScheduleCronJob(context.Background(), value0))
    fmt.Print("\n")
    break
  case "descheduleCronJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DescheduleCronJob requires 1 args")
      flag.Usage()
    }
    arg553 := flag.Arg(1)
    mbTrans554 := thrift.NewTMemoryBufferLen(len(arg553))
    defer mbTrans554.Close()
    _, err555 := mbTrans554.WriteString(arg553)
    if err555 != nil {
      Usage()
      return
    }
    factory556 := thrift.NewTJSONProtocolFactory()
    jsProt557 := factory556.GetProtocol(mbTrans554)
    argvalue0 := aurora.NewJobKey()
    err558 := argvalue0.Read(context.Background(), jsProt557)
    if err558 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DescheduleCronJob(context.Background(), value0))
    fmt.Print("\n")
    break
  case "startCronJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StartCronJob requires 1 args")
      flag.Usage()
    }
    arg559 := flag.Arg(1)
    mbTrans560 := thrift.NewTMemoryBufferLen(len(arg559))
    defer mbTrans560.Close()
    _, err561 := mbTrans560.WriteString(arg559)
    if err561 != nil {
      Usage()
      return
    }
    factory562 := thrift.NewTJSONProtocolFactory()
    jsProt563 := factory562.GetProtocol(mbTrans560)
    argvalue0 := aurora.NewJobKey()
    err564 := argvalue0.Read(context.Background(), jsProt563)
    if err564 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.StartCronJob(context.Background(), value0))
    fmt.Print("\n")
    break
  case "restartShards":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RestartShards requires 2 args")
      flag.Usage()
    }
    arg565 := flag.Arg(1)
    mbTrans566 := thrift.NewTMemoryBufferLen(len(arg565))
    defer mbTrans566.Close()
    _, err567 := mbTrans566.WriteString(arg565)
    if err567 != nil {
      Usage()
      return
    }
    factory568 := thrift.NewTJSONProtocolFactory()
    jsProt569 := factory568.GetProtocol(mbTrans566)
    argvalue0 := aurora.NewJobKey()
    err570 := argvalue0.Read(context.Background(), jsProt569)
    if err570 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg571 := flag.Arg(2)
    mbTrans572 := thrift.NewTMemoryBufferLen(len(arg571))
    defer mbTrans572.Close()
    _, err573 := mbTrans572.WriteString(arg571)
    if err573 != nil { 
      Usage()
      return
    }
    factory574 := thrift.NewTJSONProtocolFactory()
    jsProt575 := factory574.GetProtocol(mbTrans572)
    containerStruct1 := aurora.NewAuroraSchedulerManagerRestartShardsArgs()
    err576 := containerStruct1.ReadField2(context.Background(), jsProt575)
    if err576 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ShardIds
    value1 := argvalue1
    fmt.Print(client.RestartShards(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "slaRestartShards":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SlaRestartShards requires 3 args")
      flag.Usage()
    }
    arg577 := flag.Arg(1)
    mbTrans578 := thrift.NewTMemoryBufferLen(len(arg577))
    defer mbTrans578.Close()
    _, err579 := mbTrans578.WriteString(arg577)
    if err579 != nil {
      Usage()
      return
    }
    factory580 := thrift.NewTJSONProtocolFactory()
    jsProt581 := factory580.GetProtocol(mbTrans578)
    argvalue0 := aurora.NewJobKey()
    err582 := argvalue0.Read(context.Background(), jsProt581)
    if err582 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg583 := flag.Arg(2)
    mbTrans584 := thrift.NewTMemoryBufferLen(len(arg583))
    defer mbTrans584.Close()
    _, err585 := mbTrans584.WriteString(arg583)
    if err585 != nil { 
      Usage()
      return
    }
    factory586 := thrift.NewTJSONProtocolFactory()
    jsProt587 := factory586.GetProtocol(mbTrans584)
    containerStruct1 := aurora.NewAuroraSchedulerManagerSlaRestartShardsArgs()
    err588 := containerStruct1.ReadField2(context.Background(), jsProt587)
    if err588 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ShardIds
    value1 := argvalue1
    arg589 := flag.Arg(3)
    mbTrans590 := thrift.NewTMemoryBufferLen(len(arg589))
    defer mbTrans590.Close()
    _, err591 := mbTrans590.WriteString(arg589)
    if err591 != nil {
      Usage()
      return
    }
    factory592 := thrift.NewTJSONProtocolFactory()
    jsProt593 := factory592.GetProtocol(mbTrans590)
    argvalue2 := aurora.NewSlaPolicy()
    err594 := argvalue2.Read(context.Background(), jsProt593)
    if err594 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SlaRestartShards(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "killTasks":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "KillTasks requires 3 args")
      flag.Usage()
    }
    arg595 := flag.Arg(1)
    mbTrans596 := thrift.NewTMemoryBufferLen(len(arg595))
    defer mbTrans596.Close()
    _, err597 := mbTrans596.WriteString(arg595)
    if err597 != nil {
      Usage()
      return
    }
    factory598 := thrift.NewTJSONProtocolFactory()
    jsProt599 := factory598.GetProtocol(mbTrans596)
    argvalue0 := aurora.NewJobKey()
    err600 := argvalue0.Read(context.Background(), jsProt599)
    if err600 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg601 := flag.Arg(2)
    mbTrans602 := thrift.NewTMemoryBufferLen(len(arg601))
    defer mbTrans602.Close()
    _, err603 := mbTrans602.WriteString(arg601)
    if err603 != nil { 
      Usage()
      return
    }
    factory604 := thrift.NewTJSONProtocolFactory()
    jsProt605 := factory604.GetProtocol(mbTrans602)
    containerStruct1 := aurora.NewAuroraSchedulerManagerKillTasksArgs()
    err606 := containerStruct1.ReadField2(context.Background(), jsProt605)
    if err606 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Instances
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.KillTasks(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "addInstances":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddInstances requires 2 args")
      flag.Usage()
    }
    arg608 := flag.Arg(1)
    mbTrans609 := thrift.NewTMemoryBufferLen(len(arg608))
    defer mbTrans609.Close()
    _, err610 := mbTrans609.WriteString(arg608)
    if err610 != nil {
      Usage()
      return
    }
    factory611 := thrift.NewTJSONProtocolFactory()
    jsProt612 := factory611.GetProtocol(mbTrans609)
    argvalue0 := aurora.NewInstanceKey()
    err613 := argvalue0.Read(context.Background(), jsProt612)
    if err613 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err614 := (strconv.Atoi(flag.Arg(2)))
    if err614 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.AddInstances(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "replaceCronTemplate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReplaceCronTemplate requires 1 args")
      flag.Usage()
    }
    arg615 := flag.Arg(1)
    mbTrans616 := thrift.NewTMemoryBufferLen(len(arg615))
    defer mbTrans616.Close()
    _, err617 := mbTrans616.WriteString(arg615)
    if err617 != nil {
      Usage()
      return
    }
    factory618 := thrift.NewTJSONProtocolFactory()
    jsProt619 := factory618.GetProtocol(mbTrans616)
    argvalue0 := aurora.NewJobConfiguration()
    err620 := argvalue0.Read(context.Background(), jsProt619)
    if err620 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReplaceCronTemplate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "startJobUpdate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "StartJobUpdate requires 2 args")
      flag.Usage()
    }
    arg621 := flag.Arg(1)
    mbTrans622 := thrift.NewTMemoryBufferLen(len(arg621))
    defer mbTrans622.Close()
    _, err623 := mbTrans622.WriteString(arg621)
    if err623 != nil {
      Usage()
      return
    }
    factory624 := thrift.NewTJSONProtocolFactory()
    jsProt625 := factory624.GetProtocol(mbTrans622)
    argvalue0 := aurora.NewJobUpdateRequest()
    err626 := argvalue0.Read(context.Background(), jsProt625)
    if err626 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.StartJobUpdate(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "pauseJobUpdate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PauseJobUpdate requires 2 args")
      flag.Usage()
    }
    arg628 := flag.Arg(1)
    mbTrans629 := thrift.NewTMemoryBufferLen(len(arg628))
    defer mbTrans629.Close()
    _, err630 := mbTrans629.WriteString(arg628)
    if err630 != nil {
      Usage()
      return
    }
    factory631 := thrift.NewTJSONProtocolFactory()
    jsProt632 := factory631.GetProtocol(mbTrans629)
    argvalue0 := aurora.NewJobUpdateKey()
    err633 := argvalue0.Read(context.Background(), jsProt632)
    if err633 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.PauseJobUpdate(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "resumeJobUpdate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ResumeJobUpdate requires 2 args")
      flag.Usage()
    }
    arg635 := flag.Arg(1)
    mbTrans636 := thrift.NewTMemoryBufferLen(len(arg635))
    defer mbTrans636.Close()
    _, err637 := mbTrans636.WriteString(arg635)
    if err637 != nil {
      Usage()
      return
    }
    factory638 := thrift.NewTJSONProtocolFactory()
    jsProt639 := factory638.GetProtocol(mbTrans636)
    argvalue0 := aurora.NewJobUpdateKey()
    err640 := argvalue0.Read(context.Background(), jsProt639)
    if err640 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ResumeJobUpdate(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "abortJobUpdate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AbortJobUpdate requires 2 args")
      flag.Usage()
    }
    arg642 := flag.Arg(1)
    mbTrans643 := thrift.NewTMemoryBufferLen(len(arg642))
    defer mbTrans643.Close()
    _, err644 := mbTrans643.WriteString(arg642)
    if err644 != nil {
      Usage()
      return
    }
    factory645 := thrift.NewTJSONProtocolFactory()
    jsProt646 := factory645.GetProtocol(mbTrans643)
    argvalue0 := aurora.NewJobUpdateKey()
    err647 := argvalue0.Read(context.Background(), jsProt646)
    if err647 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AbortJobUpdate(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "rollbackJobUpdate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RollbackJobUpdate requires 2 args")
      flag.Usage()
    }
    arg649 := flag.Arg(1)
    mbTrans650 := thrift.NewTMemoryBufferLen(len(arg649))
    defer mbTrans650.Close()
    _, err651 := mbTrans650.WriteString(arg649)
    if err651 != nil {
      Usage()
      return
    }
    factory652 := thrift.NewTJSONProtocolFactory()
    jsProt653 := factory652.GetProtocol(mbTrans650)
    argvalue0 := aurora.NewJobUpdateKey()
    err654 := argvalue0.Read(context.Background(), jsProt653)
    if err654 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RollbackJobUpdate(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "pulseJobUpdate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PulseJobUpdate requires 1 args")
      flag.Usage()
    }
    arg656 := flag.Arg(1)
    mbTrans657 := thrift.NewTMemoryBufferLen(len(arg656))
    defer mbTrans657.Close()
    _, err658 := mbTrans657.WriteString(arg656)
    if err658 != nil {
      Usage()
      return
    }
    factory659 := thrift.NewTJSONProtocolFactory()
    jsProt660 := factory659.GetProtocol(mbTrans657)
    argvalue0 := aurora.NewJobUpdateKey()
    err661 := argvalue0.Read(context.Background(), jsProt660)
    if err661 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PulseJobUpdate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRoleSummary":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRoleSummary requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRoleSummary(context.Background()))
    fmt.Print("\n")
    break
  case "getJobSummary":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetJobSummary requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetJobSummary(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTasksStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTasksStatus requires 1 args")
      flag.Usage()
    }
    arg663 := flag.Arg(1)
    mbTrans664 := thrift.NewTMemoryBufferLen(len(arg663))
    defer mbTrans664.Close()
    _, err665 := mbTrans664.WriteString(arg663)
    if err665 != nil {
      Usage()
      return
    }
    factory666 := thrift.NewTJSONProtocolFactory()
    jsProt667 := factory666.GetProtocol(mbTrans664)
    argvalue0 := aurora.NewTaskQuery()
    err668 := argvalue0.Read(context.Background(), jsProt667)
    if err668 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTasksStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTasksWithoutConfigs":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTasksWithoutConfigs requires 1 args")
      flag.Usage()
    }
    arg669 := flag.Arg(1)
    mbTrans670 := thrift.NewTMemoryBufferLen(len(arg669))
    defer mbTrans670.Close()
    _, err671 := mbTrans670.WriteString(arg669)
    if err671 != nil {
      Usage()
      return
    }
    factory672 := thrift.NewTJSONProtocolFactory()
    jsProt673 := factory672.GetProtocol(mbTrans670)
    argvalue0 := aurora.NewTaskQuery()
    err674 := argvalue0.Read(context.Background(), jsProt673)
    if err674 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTasksWithoutConfigs(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPendingReason":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPendingReason requires 1 args")
      flag.Usage()
    }
    arg675 := flag.Arg(1)
    mbTrans676 := thrift.NewTMemoryBufferLen(len(arg675))
    defer mbTrans676.Close()
    _, err677 := mbTrans676.WriteString(arg675)
    if err677 != nil {
      Usage()
      return
    }
    factory678 := thrift.NewTJSONProtocolFactory()
    jsProt679 := factory678.GetProtocol(mbTrans676)
    argvalue0 := aurora.NewTaskQuery()
    err680 := argvalue0.Read(context.Background(), jsProt679)
    if err680 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPendingReason(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getConfigSummary":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetConfigSummary requires 1 args")
      flag.Usage()
    }
    arg681 := flag.Arg(1)
    mbTrans682 := thrift.NewTMemoryBufferLen(len(arg681))
    defer mbTrans682.Close()
    _, err683 := mbTrans682.WriteString(arg681)
    if err683 != nil {
      Usage()
      return
    }
    factory684 := thrift.NewTJSONProtocolFactory()
    jsProt685 := factory684.GetProtocol(mbTrans682)
    argvalue0 := aurora.NewJobKey()
    err686 := argvalue0.Read(context.Background(), jsProt685)
    if err686 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetConfigSummary(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getJobs":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetJobs requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetJobs(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getQuota":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetQuota requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetQuota(context.Background(), value0))
    fmt.Print("\n")
    break
  case "populateJobConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PopulateJobConfig requires 1 args")
      flag.Usage()
    }
    arg689 := flag.Arg(1)
    mbTrans690 := thrift.NewTMemoryBufferLen(len(arg689))
    defer mbTrans690.Close()
    _, err691 := mbTrans690.WriteString(arg689)
    if err691 != nil {
      Usage()
      return
    }
    factory692 := thrift.NewTJSONProtocolFactory()
    jsProt693 := factory692.GetProtocol(mbTrans690)
    argvalue0 := aurora.NewJobConfiguration()
    err694 := argvalue0.Read(context.Background(), jsProt693)
    if err694 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PopulateJobConfig(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getJobUpdateSummaries":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetJobUpdateSummaries requires 1 args")
      flag.Usage()
    }
    arg695 := flag.Arg(1)
    mbTrans696 := thrift.NewTMemoryBufferLen(len(arg695))
    defer mbTrans696.Close()
    _, err697 := mbTrans696.WriteString(arg695)
    if err697 != nil {
      Usage()
      return
    }
    factory698 := thrift.NewTJSONProtocolFactory()
    jsProt699 := factory698.GetProtocol(mbTrans696)
    argvalue0 := aurora.NewJobUpdateQuery()
    err700 := argvalue0.Read(context.Background(), jsProt699)
    if err700 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetJobUpdateSummaries(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getJobUpdateDetails":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetJobUpdateDetails requires 1 args")
      flag.Usage()
    }
    arg701 := flag.Arg(1)
    mbTrans702 := thrift.NewTMemoryBufferLen(len(arg701))
    defer mbTrans702.Close()
    _, err703 := mbTrans702.WriteString(arg701)
    if err703 != nil {
      Usage()
      return
    }
    factory704 := thrift.NewTJSONProtocolFactory()
    jsProt705 := factory704.GetProtocol(mbTrans702)
    argvalue0 := aurora.NewJobUpdateQuery()
    err706 := argvalue0.Read(context.Background(), jsProt705)
    if err706 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetJobUpdateDetails(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getJobUpdateDiff":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetJobUpdateDiff requires 1 args")
      flag.Usage()
    }
    arg707 := flag.Arg(1)
    mbTrans708 := thrift.NewTMemoryBufferLen(len(arg707))
    defer mbTrans708.Close()
    _, err709 := mbTrans708.WriteString(arg707)
    if err709 != nil {
      Usage()
      return
    }
    factory710 := thrift.NewTJSONProtocolFactory()
    jsProt711 := factory710.GetProtocol(mbTrans708)
    argvalue0 := aurora.NewJobUpdateRequest()
    err712 := argvalue0.Read(context.Background(), jsProt711)
    if err712 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetJobUpdateDiff(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTierConfigs":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetTierConfigs requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetTierConfigs(context.Background()))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
