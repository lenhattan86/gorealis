// Code generated by Thrift Compiler (0.14.1). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"aurora"
)

var _ = aurora.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  Response createJob(JobConfiguration description)")
  fmt.Fprintln(os.Stderr, "  Response scheduleCronJob(JobConfiguration description)")
  fmt.Fprintln(os.Stderr, "  Response descheduleCronJob(JobKey job)")
  fmt.Fprintln(os.Stderr, "  Response startCronJob(JobKey job)")
  fmt.Fprintln(os.Stderr, "  Response restartShards(JobKey job,  shardIds)")
  fmt.Fprintln(os.Stderr, "  Response slaRestartShards(JobKey job,  shardIds, SlaPolicy slaPolicy)")
  fmt.Fprintln(os.Stderr, "  Response killTasks(JobKey job,  instances, string message)")
  fmt.Fprintln(os.Stderr, "  Response addInstances(InstanceKey key, i32 count)")
  fmt.Fprintln(os.Stderr, "  Response replaceCronTemplate(JobConfiguration config)")
  fmt.Fprintln(os.Stderr, "  Response startJobUpdate(JobUpdateRequest request, string message)")
  fmt.Fprintln(os.Stderr, "  Response pauseJobUpdate(JobUpdateKey key, string message)")
  fmt.Fprintln(os.Stderr, "  Response resumeJobUpdate(JobUpdateKey key, string message)")
  fmt.Fprintln(os.Stderr, "  Response abortJobUpdate(JobUpdateKey key, string message)")
  fmt.Fprintln(os.Stderr, "  Response rollbackJobUpdate(JobUpdateKey key, string message)")
  fmt.Fprintln(os.Stderr, "  Response pulseJobUpdate(JobUpdateKey key)")
  fmt.Fprintln(os.Stderr, "  Response getRoleSummary()")
  fmt.Fprintln(os.Stderr, "  Response getJobSummary(string role)")
  fmt.Fprintln(os.Stderr, "  Response getTasksStatus(TaskQuery query)")
  fmt.Fprintln(os.Stderr, "  Response getTasksWithoutConfigs(TaskQuery query)")
  fmt.Fprintln(os.Stderr, "  Response getPendingReason(TaskQuery query)")
  fmt.Fprintln(os.Stderr, "  Response getConfigSummary(JobKey job)")
  fmt.Fprintln(os.Stderr, "  Response getJobs(string ownerRole)")
  fmt.Fprintln(os.Stderr, "  Response getQuota(string ownerRole)")
  fmt.Fprintln(os.Stderr, "  Response populateJobConfig(JobConfiguration description)")
  fmt.Fprintln(os.Stderr, "  Response getJobUpdateSummaries(JobUpdateQuery jobUpdateQuery)")
  fmt.Fprintln(os.Stderr, "  Response getJobUpdateDetails(JobUpdateQuery query)")
  fmt.Fprintln(os.Stderr, "  Response getJobUpdateDiff(JobUpdateRequest request)")
  fmt.Fprintln(os.Stderr, "  Response getTierConfigs()")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := aurora.NewAuroraSchedulerManagerClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "createJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateJob requires 1 args")
      flag.Usage()
    }
    arg244 := flag.Arg(1)
    mbTrans245 := thrift.NewTMemoryBufferLen(len(arg244))
    defer mbTrans245.Close()
    _, err246 := mbTrans245.WriteString(arg244)
    if err246 != nil {
      Usage()
      return
    }
    factory247 := thrift.NewTJSONProtocolFactory()
    jsProt248 := factory247.GetProtocol(mbTrans245)
    argvalue0 := aurora.NewJobConfiguration()
    err249 := argvalue0.Read(context.Background(), jsProt248)
    if err249 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateJob(context.Background(), value0))
    fmt.Print("\n")
    break
  case "scheduleCronJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ScheduleCronJob requires 1 args")
      flag.Usage()
    }
    arg250 := flag.Arg(1)
    mbTrans251 := thrift.NewTMemoryBufferLen(len(arg250))
    defer mbTrans251.Close()
    _, err252 := mbTrans251.WriteString(arg250)
    if err252 != nil {
      Usage()
      return
    }
    factory253 := thrift.NewTJSONProtocolFactory()
    jsProt254 := factory253.GetProtocol(mbTrans251)
    argvalue0 := aurora.NewJobConfiguration()
    err255 := argvalue0.Read(context.Background(), jsProt254)
    if err255 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ScheduleCronJob(context.Background(), value0))
    fmt.Print("\n")
    break
  case "descheduleCronJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DescheduleCronJob requires 1 args")
      flag.Usage()
    }
    arg256 := flag.Arg(1)
    mbTrans257 := thrift.NewTMemoryBufferLen(len(arg256))
    defer mbTrans257.Close()
    _, err258 := mbTrans257.WriteString(arg256)
    if err258 != nil {
      Usage()
      return
    }
    factory259 := thrift.NewTJSONProtocolFactory()
    jsProt260 := factory259.GetProtocol(mbTrans257)
    argvalue0 := aurora.NewJobKey()
    err261 := argvalue0.Read(context.Background(), jsProt260)
    if err261 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DescheduleCronJob(context.Background(), value0))
    fmt.Print("\n")
    break
  case "startCronJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StartCronJob requires 1 args")
      flag.Usage()
    }
    arg262 := flag.Arg(1)
    mbTrans263 := thrift.NewTMemoryBufferLen(len(arg262))
    defer mbTrans263.Close()
    _, err264 := mbTrans263.WriteString(arg262)
    if err264 != nil {
      Usage()
      return
    }
    factory265 := thrift.NewTJSONProtocolFactory()
    jsProt266 := factory265.GetProtocol(mbTrans263)
    argvalue0 := aurora.NewJobKey()
    err267 := argvalue0.Read(context.Background(), jsProt266)
    if err267 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.StartCronJob(context.Background(), value0))
    fmt.Print("\n")
    break
  case "restartShards":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RestartShards requires 2 args")
      flag.Usage()
    }
    arg268 := flag.Arg(1)
    mbTrans269 := thrift.NewTMemoryBufferLen(len(arg268))
    defer mbTrans269.Close()
    _, err270 := mbTrans269.WriteString(arg268)
    if err270 != nil {
      Usage()
      return
    }
    factory271 := thrift.NewTJSONProtocolFactory()
    jsProt272 := factory271.GetProtocol(mbTrans269)
    argvalue0 := aurora.NewJobKey()
    err273 := argvalue0.Read(context.Background(), jsProt272)
    if err273 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg274 := flag.Arg(2)
    mbTrans275 := thrift.NewTMemoryBufferLen(len(arg274))
    defer mbTrans275.Close()
    _, err276 := mbTrans275.WriteString(arg274)
    if err276 != nil { 
      Usage()
      return
    }
    factory277 := thrift.NewTJSONProtocolFactory()
    jsProt278 := factory277.GetProtocol(mbTrans275)
    containerStruct1 := aurora.NewAuroraSchedulerManagerRestartShardsArgs()
    err279 := containerStruct1.ReadField2(context.Background(), jsProt278)
    if err279 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ShardIds
    value1 := argvalue1
    fmt.Print(client.RestartShards(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "slaRestartShards":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SlaRestartShards requires 3 args")
      flag.Usage()
    }
    arg280 := flag.Arg(1)
    mbTrans281 := thrift.NewTMemoryBufferLen(len(arg280))
    defer mbTrans281.Close()
    _, err282 := mbTrans281.WriteString(arg280)
    if err282 != nil {
      Usage()
      return
    }
    factory283 := thrift.NewTJSONProtocolFactory()
    jsProt284 := factory283.GetProtocol(mbTrans281)
    argvalue0 := aurora.NewJobKey()
    err285 := argvalue0.Read(context.Background(), jsProt284)
    if err285 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg286 := flag.Arg(2)
    mbTrans287 := thrift.NewTMemoryBufferLen(len(arg286))
    defer mbTrans287.Close()
    _, err288 := mbTrans287.WriteString(arg286)
    if err288 != nil { 
      Usage()
      return
    }
    factory289 := thrift.NewTJSONProtocolFactory()
    jsProt290 := factory289.GetProtocol(mbTrans287)
    containerStruct1 := aurora.NewAuroraSchedulerManagerSlaRestartShardsArgs()
    err291 := containerStruct1.ReadField2(context.Background(), jsProt290)
    if err291 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ShardIds
    value1 := argvalue1
    arg292 := flag.Arg(3)
    mbTrans293 := thrift.NewTMemoryBufferLen(len(arg292))
    defer mbTrans293.Close()
    _, err294 := mbTrans293.WriteString(arg292)
    if err294 != nil {
      Usage()
      return
    }
    factory295 := thrift.NewTJSONProtocolFactory()
    jsProt296 := factory295.GetProtocol(mbTrans293)
    argvalue2 := aurora.NewSlaPolicy()
    err297 := argvalue2.Read(context.Background(), jsProt296)
    if err297 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SlaRestartShards(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "killTasks":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "KillTasks requires 3 args")
      flag.Usage()
    }
    arg298 := flag.Arg(1)
    mbTrans299 := thrift.NewTMemoryBufferLen(len(arg298))
    defer mbTrans299.Close()
    _, err300 := mbTrans299.WriteString(arg298)
    if err300 != nil {
      Usage()
      return
    }
    factory301 := thrift.NewTJSONProtocolFactory()
    jsProt302 := factory301.GetProtocol(mbTrans299)
    argvalue0 := aurora.NewJobKey()
    err303 := argvalue0.Read(context.Background(), jsProt302)
    if err303 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg304 := flag.Arg(2)
    mbTrans305 := thrift.NewTMemoryBufferLen(len(arg304))
    defer mbTrans305.Close()
    _, err306 := mbTrans305.WriteString(arg304)
    if err306 != nil { 
      Usage()
      return
    }
    factory307 := thrift.NewTJSONProtocolFactory()
    jsProt308 := factory307.GetProtocol(mbTrans305)
    containerStruct1 := aurora.NewAuroraSchedulerManagerKillTasksArgs()
    err309 := containerStruct1.ReadField2(context.Background(), jsProt308)
    if err309 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Instances
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.KillTasks(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "addInstances":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddInstances requires 2 args")
      flag.Usage()
    }
    arg311 := flag.Arg(1)
    mbTrans312 := thrift.NewTMemoryBufferLen(len(arg311))
    defer mbTrans312.Close()
    _, err313 := mbTrans312.WriteString(arg311)
    if err313 != nil {
      Usage()
      return
    }
    factory314 := thrift.NewTJSONProtocolFactory()
    jsProt315 := factory314.GetProtocol(mbTrans312)
    argvalue0 := aurora.NewInstanceKey()
    err316 := argvalue0.Read(context.Background(), jsProt315)
    if err316 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err317 := (strconv.Atoi(flag.Arg(2)))
    if err317 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.AddInstances(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "replaceCronTemplate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReplaceCronTemplate requires 1 args")
      flag.Usage()
    }
    arg318 := flag.Arg(1)
    mbTrans319 := thrift.NewTMemoryBufferLen(len(arg318))
    defer mbTrans319.Close()
    _, err320 := mbTrans319.WriteString(arg318)
    if err320 != nil {
      Usage()
      return
    }
    factory321 := thrift.NewTJSONProtocolFactory()
    jsProt322 := factory321.GetProtocol(mbTrans319)
    argvalue0 := aurora.NewJobConfiguration()
    err323 := argvalue0.Read(context.Background(), jsProt322)
    if err323 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReplaceCronTemplate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "startJobUpdate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "StartJobUpdate requires 2 args")
      flag.Usage()
    }
    arg324 := flag.Arg(1)
    mbTrans325 := thrift.NewTMemoryBufferLen(len(arg324))
    defer mbTrans325.Close()
    _, err326 := mbTrans325.WriteString(arg324)
    if err326 != nil {
      Usage()
      return
    }
    factory327 := thrift.NewTJSONProtocolFactory()
    jsProt328 := factory327.GetProtocol(mbTrans325)
    argvalue0 := aurora.NewJobUpdateRequest()
    err329 := argvalue0.Read(context.Background(), jsProt328)
    if err329 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.StartJobUpdate(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "pauseJobUpdate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PauseJobUpdate requires 2 args")
      flag.Usage()
    }
    arg331 := flag.Arg(1)
    mbTrans332 := thrift.NewTMemoryBufferLen(len(arg331))
    defer mbTrans332.Close()
    _, err333 := mbTrans332.WriteString(arg331)
    if err333 != nil {
      Usage()
      return
    }
    factory334 := thrift.NewTJSONProtocolFactory()
    jsProt335 := factory334.GetProtocol(mbTrans332)
    argvalue0 := aurora.NewJobUpdateKey()
    err336 := argvalue0.Read(context.Background(), jsProt335)
    if err336 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.PauseJobUpdate(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "resumeJobUpdate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ResumeJobUpdate requires 2 args")
      flag.Usage()
    }
    arg338 := flag.Arg(1)
    mbTrans339 := thrift.NewTMemoryBufferLen(len(arg338))
    defer mbTrans339.Close()
    _, err340 := mbTrans339.WriteString(arg338)
    if err340 != nil {
      Usage()
      return
    }
    factory341 := thrift.NewTJSONProtocolFactory()
    jsProt342 := factory341.GetProtocol(mbTrans339)
    argvalue0 := aurora.NewJobUpdateKey()
    err343 := argvalue0.Read(context.Background(), jsProt342)
    if err343 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ResumeJobUpdate(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "abortJobUpdate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AbortJobUpdate requires 2 args")
      flag.Usage()
    }
    arg345 := flag.Arg(1)
    mbTrans346 := thrift.NewTMemoryBufferLen(len(arg345))
    defer mbTrans346.Close()
    _, err347 := mbTrans346.WriteString(arg345)
    if err347 != nil {
      Usage()
      return
    }
    factory348 := thrift.NewTJSONProtocolFactory()
    jsProt349 := factory348.GetProtocol(mbTrans346)
    argvalue0 := aurora.NewJobUpdateKey()
    err350 := argvalue0.Read(context.Background(), jsProt349)
    if err350 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AbortJobUpdate(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "rollbackJobUpdate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RollbackJobUpdate requires 2 args")
      flag.Usage()
    }
    arg352 := flag.Arg(1)
    mbTrans353 := thrift.NewTMemoryBufferLen(len(arg352))
    defer mbTrans353.Close()
    _, err354 := mbTrans353.WriteString(arg352)
    if err354 != nil {
      Usage()
      return
    }
    factory355 := thrift.NewTJSONProtocolFactory()
    jsProt356 := factory355.GetProtocol(mbTrans353)
    argvalue0 := aurora.NewJobUpdateKey()
    err357 := argvalue0.Read(context.Background(), jsProt356)
    if err357 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RollbackJobUpdate(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "pulseJobUpdate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PulseJobUpdate requires 1 args")
      flag.Usage()
    }
    arg359 := flag.Arg(1)
    mbTrans360 := thrift.NewTMemoryBufferLen(len(arg359))
    defer mbTrans360.Close()
    _, err361 := mbTrans360.WriteString(arg359)
    if err361 != nil {
      Usage()
      return
    }
    factory362 := thrift.NewTJSONProtocolFactory()
    jsProt363 := factory362.GetProtocol(mbTrans360)
    argvalue0 := aurora.NewJobUpdateKey()
    err364 := argvalue0.Read(context.Background(), jsProt363)
    if err364 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PulseJobUpdate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRoleSummary":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRoleSummary requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRoleSummary(context.Background()))
    fmt.Print("\n")
    break
  case "getJobSummary":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetJobSummary requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetJobSummary(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTasksStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTasksStatus requires 1 args")
      flag.Usage()
    }
    arg366 := flag.Arg(1)
    mbTrans367 := thrift.NewTMemoryBufferLen(len(arg366))
    defer mbTrans367.Close()
    _, err368 := mbTrans367.WriteString(arg366)
    if err368 != nil {
      Usage()
      return
    }
    factory369 := thrift.NewTJSONProtocolFactory()
    jsProt370 := factory369.GetProtocol(mbTrans367)
    argvalue0 := aurora.NewTaskQuery()
    err371 := argvalue0.Read(context.Background(), jsProt370)
    if err371 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTasksStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTasksWithoutConfigs":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTasksWithoutConfigs requires 1 args")
      flag.Usage()
    }
    arg372 := flag.Arg(1)
    mbTrans373 := thrift.NewTMemoryBufferLen(len(arg372))
    defer mbTrans373.Close()
    _, err374 := mbTrans373.WriteString(arg372)
    if err374 != nil {
      Usage()
      return
    }
    factory375 := thrift.NewTJSONProtocolFactory()
    jsProt376 := factory375.GetProtocol(mbTrans373)
    argvalue0 := aurora.NewTaskQuery()
    err377 := argvalue0.Read(context.Background(), jsProt376)
    if err377 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTasksWithoutConfigs(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPendingReason":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPendingReason requires 1 args")
      flag.Usage()
    }
    arg378 := flag.Arg(1)
    mbTrans379 := thrift.NewTMemoryBufferLen(len(arg378))
    defer mbTrans379.Close()
    _, err380 := mbTrans379.WriteString(arg378)
    if err380 != nil {
      Usage()
      return
    }
    factory381 := thrift.NewTJSONProtocolFactory()
    jsProt382 := factory381.GetProtocol(mbTrans379)
    argvalue0 := aurora.NewTaskQuery()
    err383 := argvalue0.Read(context.Background(), jsProt382)
    if err383 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPendingReason(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getConfigSummary":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetConfigSummary requires 1 args")
      flag.Usage()
    }
    arg384 := flag.Arg(1)
    mbTrans385 := thrift.NewTMemoryBufferLen(len(arg384))
    defer mbTrans385.Close()
    _, err386 := mbTrans385.WriteString(arg384)
    if err386 != nil {
      Usage()
      return
    }
    factory387 := thrift.NewTJSONProtocolFactory()
    jsProt388 := factory387.GetProtocol(mbTrans385)
    argvalue0 := aurora.NewJobKey()
    err389 := argvalue0.Read(context.Background(), jsProt388)
    if err389 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetConfigSummary(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getJobs":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetJobs requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetJobs(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getQuota":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetQuota requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetQuota(context.Background(), value0))
    fmt.Print("\n")
    break
  case "populateJobConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PopulateJobConfig requires 1 args")
      flag.Usage()
    }
    arg392 := flag.Arg(1)
    mbTrans393 := thrift.NewTMemoryBufferLen(len(arg392))
    defer mbTrans393.Close()
    _, err394 := mbTrans393.WriteString(arg392)
    if err394 != nil {
      Usage()
      return
    }
    factory395 := thrift.NewTJSONProtocolFactory()
    jsProt396 := factory395.GetProtocol(mbTrans393)
    argvalue0 := aurora.NewJobConfiguration()
    err397 := argvalue0.Read(context.Background(), jsProt396)
    if err397 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PopulateJobConfig(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getJobUpdateSummaries":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetJobUpdateSummaries requires 1 args")
      flag.Usage()
    }
    arg398 := flag.Arg(1)
    mbTrans399 := thrift.NewTMemoryBufferLen(len(arg398))
    defer mbTrans399.Close()
    _, err400 := mbTrans399.WriteString(arg398)
    if err400 != nil {
      Usage()
      return
    }
    factory401 := thrift.NewTJSONProtocolFactory()
    jsProt402 := factory401.GetProtocol(mbTrans399)
    argvalue0 := aurora.NewJobUpdateQuery()
    err403 := argvalue0.Read(context.Background(), jsProt402)
    if err403 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetJobUpdateSummaries(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getJobUpdateDetails":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetJobUpdateDetails requires 1 args")
      flag.Usage()
    }
    arg404 := flag.Arg(1)
    mbTrans405 := thrift.NewTMemoryBufferLen(len(arg404))
    defer mbTrans405.Close()
    _, err406 := mbTrans405.WriteString(arg404)
    if err406 != nil {
      Usage()
      return
    }
    factory407 := thrift.NewTJSONProtocolFactory()
    jsProt408 := factory407.GetProtocol(mbTrans405)
    argvalue0 := aurora.NewJobUpdateQuery()
    err409 := argvalue0.Read(context.Background(), jsProt408)
    if err409 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetJobUpdateDetails(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getJobUpdateDiff":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetJobUpdateDiff requires 1 args")
      flag.Usage()
    }
    arg410 := flag.Arg(1)
    mbTrans411 := thrift.NewTMemoryBufferLen(len(arg410))
    defer mbTrans411.Close()
    _, err412 := mbTrans411.WriteString(arg410)
    if err412 != nil {
      Usage()
      return
    }
    factory413 := thrift.NewTJSONProtocolFactory()
    jsProt414 := factory413.GetProtocol(mbTrans411)
    argvalue0 := aurora.NewJobUpdateRequest()
    err415 := argvalue0.Read(context.Background(), jsProt414)
    if err415 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetJobUpdateDiff(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTierConfigs":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetTierConfigs requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetTierConfigs(context.Background()))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
